import * as fs from 'fs';
import * as path from 'path';
import { stringify } from 'yaml';
import { IExpressWave } from './express-wave';
import { JsonPatch, Patch } from './utils/json-patch';

export interface GitHubWorkflowConfig {
  /**
   * The working directory for the GitHub workflow
   * @default "."
   */
  readonly workingDir?: string;

  /**
   * Configuration for the synth workflow
   */
  readonly synth: SynthWorkflowConfig;

  /**
   * Configuration for the diff workflow
   */
  readonly diff: DiffWorkflowConfig;
}

export interface SynthWorkflowConfig {
  /**
   * Configuration for the build workflow path
   */
  readonly buildConfig: BuildWorkflowPathConfig;

  /**
   * Commands to run for synthesis
   */
  readonly commands: Record<string, string>[];
}

export interface BuildWorkflowPathConfig {
  /**
   * The type of workflow to use
   */
  readonly type: 'preset-npm' | 'workflow';

  /**
   * Only required if type is 'workflow'. Specify the workflow or reusable action to use for building
   */
  readonly workflow?: WorkflowLocation;
}

export interface WorkflowLocation {
  /**
   * The path of the workflow to call before synthesis
   */
  readonly path: string;
}

export interface WorkflowTriggersPullRequests {
  readonly branches?: string[];
}
export interface WorkflowTriggers {
  readonly pullRequest?: WorkflowTriggersPullRequests;
}
export interface DiffWorkflowConfig {
  /**
   * Configuration for pull request triggers
   */
  readonly on: WorkflowTriggers;

  /**
   * ARN of the role to assume for the diff operation
   */
  readonly assumeRoleArn: string;

  /**
   * AWS region to assume for the diff operation
   */
  readonly assumeRegion: string;

  /**
   * Selector for the stack type
   */
  readonly stackSelector: 'wave' | 'stage';

  /**
   * Commands to run for synthesis
   */
  readonly commands: Record<string, string>[];

  /**
   * Whether to write the diff as a comment
   * @default true
   */
  readonly writeAsComment?: boolean;
}


export class GithubWorkflow {

  public readonly json: object;

  constructor(json: object) {
    this.json = json;
  }

  /**
   * Applies a set of JSON-Patch (RFC-6902) operations to this object and returns the result.
   * @param ops The operations to apply
   * @returns The result object
   */
  public patch(...ops: Patch[]): GithubWorkflow {
    const jsonPatch = new JsonPatch();
    const result = jsonPatch.patch(this.json, ...ops);
    return new GithubWorkflow(result);
  }
}

export interface GithubWorkflowFile {
  readonly fileName: string;
  readonly content: GithubWorkflow;
}


const AUTO_GENEREATED_COMMENT = '# ~~ Generated by cdk-express-pipeline. To modify, edit your pipeline and run `cdk synth`';

export function createGitHubWorkflows(githubConfig: GitHubWorkflowConfig, waves: IExpressWave[]) {
  const workingDir = githubConfig.workingDir || '.';

  const workflowFiles: GithubWorkflowFile[] = [];
  workflowFiles.push(synthReusableAction(workingDir, githubConfig.synth));
  workflowFiles.push(diffReusableAction(githubConfig.diff));
  workflowFiles.push(diffWorkflow(workingDir, githubConfig.diff, waves));

  return workflowFiles;
}

export function saveWorkflowTemplates(templates: GithubWorkflowFile[]) {
  const githubDir = path.join(process.cwd(), '.github');
  if (!fs.existsSync(githubDir)) {
    fs.mkdirSync(githubDir, { recursive: true });
  }

  templates.forEach(template => {
    const filePath = path.join(githubDir, template.fileName);
    const dirPath = path.dirname(filePath);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }

    const yamlContent = `${AUTO_GENEREATED_COMMENT}\n${stringify(template.content.json)}`;
    fs.writeFileSync(filePath, yamlContent);
  });
}

function synthReusableAction(workingDir: string, synthConfig: SynthWorkflowConfig): GithubWorkflowFile {
  const synthSteps = synthConfig.commands.map(command => {
    const commandKey = Object.keys(command)[0];
    const commandValue = command[commandKey];
    return {
      name: `CDK synth ${commandKey}`,
      shell: 'bash',
      run: commandValue,
    };
  });

  console.log(workingDir);

  let buildSteps: object[] = [];
  if ( synthConfig.buildConfig.type === 'preset-npm') {
    buildSteps = [{
      name: 'Set up node',
      uses: 'actions/setup-node@v4',
      with: {
        'node-version': 20,
        'cache': 'npm',
      },
    },
    {
      name: 'Install dependencies',
      run: 'npm ci',
      shell: 'bash',
    }];
  } else if (synthConfig.buildConfig.type === 'workflow') {
    if (!synthConfig.buildConfig.workflow?.path) {
      throw new Error('Workflow is required when using "workflow" type for build');
    }
    buildSteps = [
      {
        name: 'Build workflow',
        uses: synthConfig.buildConfig.workflow.path,
      },
    ];
  }


  const workflowContent = new GithubWorkflow({
    name: 'CDK Express Pipeline Synth Action',
    runs: {
      using: 'composite',
      steps: [
        {
          name: 'Checkout repo',
          uses: 'actions/checkout@v4',
        },
        ...buildSteps,
        ...synthSteps,
        {
          name: 'Cache Build',
          uses: 'actions/cache/save@v4',
          with: {
            key: 'cache-build-${{ github.sha }}',
            path: [
              'cdk.out/',
              'node_modules/',
            ].join('\n'),
          },
        },
      ],
    },
  });

  return {
    fileName: 'actions/cdk-express-pipeline-synth/action.yml',
    content: workflowContent,
  };
}

function diffReusableAction(diffConfig: DiffWorkflowConfig): GithubWorkflowFile {
  const workflowContent = new GithubWorkflow({
    name: 'CDK Diff Action',
    description: 'Run CDK diff for a specific stack pattern and post results to PR',
    inputs: {
      'stack-selector-patterns': {
        required: true,
        description: 'The value of the {stackSelector} replacement in the command',
      },
      'command': {
        required: true,
        description: 'CDK diff command',
      },
      'cloud-assembly-directory': {
        required: true,
        description: 'The directory where the CDK cloud assembly is located',
      },
      'github-token': {
        required: true,
        description: 'GitHub token for posting comments',
      },
      'write-as-comment': {
        required: true,
        description: 'Whether to write the diff as a comment or do the command instead',
      },
      'comment-title': {
        required: true,
        description: 'Title for the diff comment',
      },
    },
    runs: {
      using: 'composite',
      steps: [
        restoreBuildCacheStep(),
        assumeAwsRoleStep(diffConfig.assumeRoleArn, diffConfig.assumeRegion),
        {
          name: 'CDK Diff Comment',
          if: '${{ inputs.write-as-comment == true }} ',
          uses: 'corymhall/cdk-diff-action@v2',
          with: {
            title: '${{ inputs.comment-title }}',
            defaultStageDisplayName: '`**`',
            stackSelectorPatterns: '${{ inputs.stack-selector-patterns }}',
            cdkOutDir: '${{ inputs.cloud-assembly-directory }}',
            githubToken: '${{ inputs.github-token }}',
            failOnDestructiveChanges: false,
          },
        },
        {
          name: 'CDK Diff Command',
          if: '${{ inputs.write-as-comment == false }} ',
          run: '${{ inputs.command }}',
          shell: 'bash',
        },
      ],
    },
  });

  return {
    fileName: 'actions/cdk-express-pipeline-diff/action.yml',
    content: workflowContent,
  };
}

function checkoutRepoStep() {
  return {
    name: 'Checkout repo',
    uses: 'actions/checkout@v4',
  };
}
function restoreBuildCacheStep() {
  return {
    name: 'Restore Build Cache',
    uses: 'actions/cache/restore@v4',
    with: {
      key: 'cache-build-${{ github.sha }}',
      path: [
        'cdk.out/',
        'node_modules/',
      ].join('\n'),
    },
  };
}
function assumeAwsRoleStep(assumeRoleArn: string, assumeRegion: string) {
  return {
    name: 'Configure AWS credentials',
    uses: 'aws-actions/configure-aws-credentials@v4',
    with: {
      'role-to-assume': assumeRoleArn,
      'aws-region': assumeRegion,
    },
  };
}

function toSnakeCase(str: string): string {
  return str
    .replace(/([a-z])([A-Z])/g, '$1_$2') // handle camelCase or PascalCase
    .replace(/[\s\-]+/g, '_') // replace spaces and hyphens with underscores
    .replace(/([A-Z]+)/g, '_$1') // add underscores before uppercase sequences
    .replace(/^_+|_+$/g, '') // trim leading/trailing underscores
    .toLowerCase();
}
function stepStackSelectors(stackSelector: 'wave' | 'stage', waves: IExpressWave[]) {
  const res: { name: string; selector: string }[] = [];
  for (const wave of waves) {
    if (stackSelector === 'wave') {
      res.push({
        name: toSnakeCase(wave.id),
        selector: `${wave.id}${wave.separator}*`,
      });
    } else if (stackSelector === 'stage') {
      for (const stage of wave.stages) {
        res.push({
          name: toSnakeCase(wave.id + '__' + stage.id),
          selector: `'${wave.id}${wave.separator}${stage.id}${wave.separator}*'`,
        });
      }
    }
  }
  return res;
}

function extractAppArgument(command: string): string | undefined {
  const match = command.match(/--app(?:=|\s)(?:"([^"]+)"|'([^']+)'|(\S+))/);

  if (!match) return undefined;

  // Return whichever capturing group matched (double quotes, single quotes, or unquoted)
  return match[1] || match[2] || match[3];
}
function diffWorkflow(workingDir: string, diffConfig: DiffWorkflowConfig, waves: IExpressWave[]): GithubWorkflowFile {

  console.log(workingDir);
  //defaults:
  //   run:
  //     working-directory: ${workingDir}

  const diffJobs = {};
  for (let command of diffConfig.commands) {
    const commandKey = Object.keys(command)[0];
    const commandValue = command[commandKey];

    const stackSelectors = stepStackSelectors(diffConfig.stackSelector, waves);
    const matrixIncludes: {
      'name': string;
      'cloud-assembly-directory': string;
      'stack-selector-patterns': string;
      'command': string;
      'write-as-comment': boolean;
    }[] = [];
    for (const stackSelector of stackSelectors) {
      matrixIncludes.push({
        'name': stackSelector.name,
        'cloud-assembly-directory': extractAppArgument(commandValue) || 'cdk.out',
        'stack-selector-patterns': stackSelector.selector,
        'command': commandValue.replace('{stackSelector}', stackSelector.selector),
        'write-as-comment': !!diffConfig.writeAsComment,
      });
    }

    // @ts-ignore
    diffJobs['diff__' + commandKey] = {
      'name': `Diff ${commandKey} - \${{ matrix.name }}`,
      'needs': ['build'],
      'runs-on': 'ubuntu-latest',
      'permissions': {
        'actions': 'write',
        'contents': 'write',
        'id-token': 'write',
        'pull-requests': 'write',
      },
      'strategy': {
        'matrix': {
          include: matrixIncludes,
        },
        'fail-fast': false,
      },
      'steps': [
        checkoutRepoStep(),
        // restoreBuildCacheStep(),
        // assumeAwsRoleStep(diffConfig.assumeRoleArn, diffConfig.assumeRegion),
        {
          name: 'Run CDK Express Pipeline Synth',
          uses: './.github/actions/cdk-express-pipeline-diff',
          with: {
            'stack-selector-patterns': '${{ matrix.stack-selector-patterns }}',
            'cloud-assembly-directory': '${{ matrix.cloud-assembly-directory }}',
            'command': '${{ matrix.command }}',
            'write-as-comment': '${{ matrix.write-as-comment }}',
            'comment-title': `CDK Diff: ${commandKey} - \${{ matrix.name }}`,
            'github-token': '${{ secrets.GITHUB_TOKEN }}',
          },
        },
      ],
    };
  }


  const workflowContent = new GithubWorkflow({
    name: 'CDK Express Pipeline Diff',
    // Need to change `pullRequest` to `pull_request` to match GitHub Actions syntax
    ...(diffConfig.on.pullRequest ? { on: { pull_request: diffConfig.on.pullRequest } } : {}),
    jobs: {
      build: {
        'runs-on': 'ubuntu-latest',
        'name': 'Build and Synth',
        'steps': [
          checkoutRepoStep(),
          {
            name: 'Run CDK Express Pipeline Synth',
            uses: './.github/actions/cdk-express-pipeline-synth',
          },
        ],
      },
      ...diffJobs,
    },
  });

  return {
    fileName: 'workflows/cdk-express-pipeline-diff.yml',
    content: workflowContent,
  };
}

